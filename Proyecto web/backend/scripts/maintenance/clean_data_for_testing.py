#!/usr/bin/env python3
"""
Script para limpiar datos transaccionales antes de las pruebas
Mantiene: Usuarios, Especialidades, Comisiones, Horarios
Elimina: Pacientes, Citas, Registros M√©dicos, Triage, Facturas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app import create_app, db
from app.models.patient import Patient
from app.models.appointment import Appointment
from app.models.medical_record import MedicalRecord
from app.models.triage import Triage
from app.models.invoice import Invoice
from sqlalchemy import text

def clean_transactional_data():
    """Limpia todos los datos transaccionales manteniendo la configuraci√≥n base"""
    
    print("üßπ Iniciando limpieza de datos transaccionales...")
    print("=" * 60)
    
    try:
        # Contar registros antes de eliminar
        patients_count = Patient.query.count()
        appointments_count = Appointment.query.count()
        medical_records_count = MedicalRecord.query.count()
        triage_count = Triage.query.count()
        invoices_count = Invoice.query.count()
        
        print(f"üìä DATOS ANTES DE LA LIMPIEZA:")
        print(f"   ‚Ä¢ Pacientes: {patients_count}")
        print(f"   ‚Ä¢ Citas: {appointments_count}")
        print(f"   ‚Ä¢ Registros M√©dicos: {medical_records_count}")
        print(f"   ‚Ä¢ Triage: {triage_count}")
        print(f"   ‚Ä¢ Facturas: {invoices_count}")
        print()
        
        # Deshabilitar restricciones de clave for√°nea temporalmente
        db.session.execute(text('PRAGMA foreign_keys = OFF'))
        
        # Eliminar datos transaccionales en el orden correcto
        print("üóëÔ∏è  Eliminando datos transaccionales...")
        
        # 1. Eliminar facturas
        Invoice.query.delete()
        print("   ‚úÖ Facturas eliminadas")
        
        # 2. Eliminar triage
        Triage.query.delete()
        print("   ‚úÖ Registros de triage eliminados")
        
        # 3. Eliminar registros m√©dicos
        MedicalRecord.query.delete()
        print("   ‚úÖ Registros m√©dicos eliminados")
        
        # 4. Eliminar citas
        Appointment.query.delete()
        print("   ‚úÖ Citas eliminadas")
        
        # 5. Eliminar pacientes
        Patient.query.delete()
        print("   ‚úÖ Pacientes eliminados")
        
        # Restablecer restricciones de clave for√°nea
        db.session.execute(text('PRAGMA foreign_keys = ON'))
        
        # Confirmar cambios
        db.session.commit()
        
        print()
        print("‚úÖ LIMPIEZA COMPLETADA EXITOSAMENTE")
        print("=" * 60)
        print("üîß CONFIGURACI√ìN MANTENIDA:")
        
        # Verificar que los datos de configuraci√≥n siguen intactos
        from app.models.user import User
        from app.models.specialty import Specialty
        from app.models.work_schedule import WorkSchedule
        from app.models.salary_configuration import SalaryConfiguration
        
        users_count = User.query.count()
        specialties_count = Specialty.query.count()
        schedules_count = WorkSchedule.query.count()
        salary_configs_count = SalaryConfiguration.query.count()
        
        print(f"   ‚Ä¢ Usuarios: {users_count}")
        print(f"   ‚Ä¢ Especialidades: {specialties_count}")
        print(f"   ‚Ä¢ Horarios: {schedules_count}")
        print(f"   ‚Ä¢ Configuraciones de salario: {salary_configs_count}")
        
        print()
        print("üìã DATOS TRANSACCIONALES DESPU√âS DE LA LIMPIEZA:")
        print(f"   ‚Ä¢ Pacientes: {Patient.query.count()}")
        print(f"   ‚Ä¢ Citas: {Appointment.query.count()}")
        print(f"   ‚Ä¢ Registros M√©dicos: {MedicalRecord.query.count()}")
        print(f"   ‚Ä¢ Triage: {Triage.query.count()}")
        print(f"   ‚Ä¢ Facturas: {Invoice.query.count()}")
        
        print()
        print("üéØ SISTEMA LISTO PARA PRUEBAS DE LA FASE 5")
        print("   El sistema mantiene toda la configuraci√≥n base")
        print("   Los datos transaccionales han sido eliminados")
        print("   Puede proceder con las pruebas del flujo del doctor")
        
    except Exception as e:
        print(f"‚ùå Error durante la limpieza: {str(e)}")
        db.session.rollback()
        raise
    
    finally:
        # Asegurar que las restricciones de clave for√°nea est√©n habilitadas
        db.session.execute(text('PRAGMA foreign_keys = ON'))
        db.session.commit()

def confirm_cleanup():
    """Confirma la limpieza con el usuario"""
    print("‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n eliminar√° TODOS los datos transaccionales")
    print("   Se mantendr√°n: Usuarios, Especialidades, Comisiones, Horarios")
    print("   Se eliminar√°n: Pacientes, Citas, Registros M√©dicos, Triage, Facturas")
    print()
    
    response = input("¬øEst√° seguro que desea continuar? (escriba 'SI' para confirmar): ").strip().upper()
    
    if response == 'SI':
        return True
    else:
        print("‚ùå Operaci√≥n cancelada")
        return False

if __name__ == "__main__":
    # Crear aplicaci√≥n Flask
    app = create_app()
    
    with app.app_context():
        if confirm_cleanup():
            clean_transactional_data()
        else:
            print("Limpieza cancelada por el usuario")
