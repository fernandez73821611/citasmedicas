#!/usr/bin/env python3
"""
Script para verificar la implementaci√≥n l√≥gica de la Fase 1 del flujo del doctor.

Este script verifica que:
1. Los modelos se cargan correctamente
2. La l√≥gica de historia cl√≠nica funciona
3. Los datos actuales no se ven afectados
4. Las relaciones entre modelos funcionan
"""

from app import create_app, db
from app.models import Patient, MedicalRecord, MedicalHistory, User
from datetime import datetime

def test_models_loading():
    """Verificar que los modelos se cargan correctamente"""
    print("üîç Verificando carga de modelos...")
    
    try:
        # Verificar que los modelos se importan correctamente
        print(f"‚úÖ Patient: {Patient}")
        print(f"‚úÖ MedicalRecord: {MedicalRecord}")
        print(f"‚úÖ MedicalHistory: {MedicalHistory}")
        print("‚úÖ Todos los modelos se cargan correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error al cargar modelos: {e}")
        return False

def test_existing_data():
    """Verificar que los datos existentes no se ven afectados"""
    print("\nüîç Verificando datos existentes...")
    
    try:
        # Contar registros existentes
        patient_count = Patient.query.count()
        medical_record_count = MedicalRecord.query.count()
        
        print(f"‚úÖ Pacientes en BD: {patient_count}")
        print(f"‚úÖ Registros m√©dicos en BD: {medical_record_count}")
        
        if patient_count > 0:
            # Probar con el primer paciente
            patient = Patient.query.first()
            print(f"‚úÖ Paciente de prueba: {patient.full_name}")
            
            # Verificar que las propiedades funcionan
            print(f"‚úÖ Edad: {patient.age}")
            print(f"‚úÖ Es menor: {patient.is_minor}")
            print(f"‚úÖ Tiene historia: {patient.has_medical_history()}")
            print(f"‚úÖ Es nuevo: {patient.is_new_patient()}")
            print(f"‚úÖ Consultas: {patient.get_medical_records_count()}")
            
            return True
        else:
            print("‚ÑπÔ∏è  No hay pacientes en la BD para probar")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar datos existentes: {e}")
        return False

def test_medical_history_logic():
    """Verificar la l√≥gica de historia cl√≠nica"""
    print("\nüîç Verificando l√≥gica de historia cl√≠nica...")
    
    try:
        # Buscar un paciente con registros m√©dicos
        patient = Patient.query.join(MedicalRecord).first()
        
        if patient:
            print(f"‚úÖ Probando con paciente: {patient.full_name}")
            
            # Crear historia cl√≠nica l√≥gica
            history = patient.get_medical_history()
            print(f"‚úÖ Historia cl√≠nica creada: {history}")
            
            # Verificar propiedades
            print(f"‚úÖ N√∫mero de historia: {history.medical_history_number}")
            print(f"‚úÖ Fecha de apertura: {history.opening_date}")
            print(f"‚úÖ Datos completos: {history.has_complete_data()}")
            
            # Obtener resumen
            summary = history.get_summary()
            print(f"‚úÖ Resumen generado: {summary['number']}")
            
            # Verificar estado del paciente
            status = patient.get_patient_status_for_doctor()
            print(f"‚úÖ Estado del paciente: {status['label']}")
            print(f"‚úÖ Acci√≥n recomendada: {status['action']}")
            
            return True
        else:
            print("‚ÑπÔ∏è  No hay pacientes con registros m√©dicos para probar")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar l√≥gica de historia cl√≠nica: {e}")
        return False

def test_medical_record_logic():
    """Verificar la l√≥gica de registros m√©dicos"""
    print("\nüîç Verificando l√≥gica de registros m√©dicos...")
    
    try:
        # Buscar un registro m√©dico
        record = MedicalRecord.query.first()
        
        if record:
            print(f"‚úÖ Probando con registro: {record.id}")
            
            # Verificar propiedades l√≥gicas
            print(f"‚úÖ Motivo de consulta: {record.chief_complaint}")
            print(f"‚úÖ Enfermedad actual: {record.current_illness}")
            print(f"‚úÖ Examen f√≠sico: {record.general_examination}")
            print(f"‚úÖ Recomendaciones: {record.recommendations}")
            
            # Verificar m√©todos
            print(f"‚úÖ Anamnesis completa: {record.has_complete_anamnesis()}")
            print(f"‚úÖ Signos vitales completos: {record.has_complete_vitals()}")
            print(f"‚úÖ Consulta completa: {record.is_complete_consultation()}")
            
            # Verificar relaci√≥n con historia cl√≠nica
            history = record.get_patient_medical_history()
            if history:
                print(f"‚úÖ Historia cl√≠nica relacionada: {history.medical_history_number}")
            
            return True
        else:
            print("‚ÑπÔ∏è  No hay registros m√©dicos para probar")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar l√≥gica de registros m√©dicos: {e}")
        return False

def test_patient_workflow():
    """Verificar el flujo completo del paciente"""
    print("\nüîç Verificando flujo completo del paciente...")
    
    try:
        # Buscar pacientes nuevos y existentes
        patients = Patient.query.limit(3).all()
        
        for patient in patients:
            print(f"\n--- Paciente: {patient.full_name} ---")
            
            # Verificar estado
            status = patient.get_patient_status_for_doctor()
            print(f"Estado: {status['label']}")
            print(f"Acci√≥n: {status['action']}")
            
            # Verificar historia cl√≠nica
            if patient.has_medical_history():
                history = patient.get_medical_history()
                summary = history.get_summary()
                print(f"Historia: {summary['number']}")
                print(f"Consultas: {summary['total_consultations']}")
            else:
                print("Sin historia cl√≠nica")
            
            # Verificar resumen m√©dico completo
            complete_summary = patient.get_complete_medical_summary()
            print(f"Resumen completo generado: ‚úÖ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al verificar flujo del paciente: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("=" * 60)
    print("üè• VERIFICACI√ìN DE FASE 1 - FLUJO DEL DOCTOR")
    print("=" * 60)
    
    # Crear aplicaci√≥n
    app = create_app()
    
    with app.app_context():
        # Ejecutar todas las pruebas
        tests = [
            ("Carga de modelos", test_models_loading),
            ("Datos existentes", test_existing_data),
            ("L√≥gica de historia cl√≠nica", test_medical_history_logic),
            ("L√≥gica de registros m√©dicos", test_medical_record_logic),
            ("Flujo completo del paciente", test_patient_workflow)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\n{'='*40}")
            print(f"üß™ {test_name}")
            print(f"{'='*40}")
            
            result = test_func()
            results.append((test_name, result))
        
        # Mostrar resultados finales
        print("\n" + "=" * 60)
        print("üìä RESULTADOS FINALES")
        print("=" * 60)
        
        all_passed = True
        for test_name, result in results:
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"{test_name}: {status}")
            if not result:
                all_passed = False
        
        print("\n" + "=" * 60)
        if all_passed:
            print("üéâ TODAS LAS PRUEBAS PASARON")
            print("‚úÖ La implementaci√≥n l√≥gica de la Fase 1 est√° funcionando correctamente")
            print("‚úÖ Los datos actuales no se ven afectados")
            print("‚úÖ Las relaciones entre modelos funcionan")
        else:
            print("‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON")
            print("‚ùå Revisar los errores mostrados arriba")
        
        print("=" * 60)

if __name__ == "__main__":
    main()
