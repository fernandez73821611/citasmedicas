#!/usr/bin/env python3
"""
Verificar que la funci√≥n de historia cl√≠nica funcione correctamente
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.patient import Patient
from app.models.user import User

def test_medical_history_validation():
    """Probar la validaci√≥n de historia cl√≠nica"""
    app = create_app()
    
    with app.app_context():
        print("üè• VERIFICANDO VALIDACI√ìN DE HISTORIA CL√çNICA")
        print("=" * 60)
        
        # Obtener un paciente nuevo
        patients = Patient.query.filter_by().all()
        new_patients = [p for p in patients if not p.has_medical_history()]
        
        if not new_patients:
            print("‚ùå No hay pacientes nuevos para probar")
            return
        
        patient = new_patients[0]
        print(f"üë§ Paciente de prueba: {patient.full_name}")
        print(f"   DNI: {patient.dni}")
        print(f"   Edad: {patient.age} a√±os")
        print(f"   Tiene historia: {patient.has_medical_history()}")
        print()
        
        # Obtener un doctor
        doctor = User.query.filter_by(role='doctor').first()
        if not doctor:
            print("‚ùå No hay doctores en el sistema")
            return
            
        print(f"üë®‚Äç‚öïÔ∏è Doctor de prueba: {doctor.full_name}")
        print()
        
        # Simular datos m√≠nimos para historia cl√≠nica
        form_data = {
            'personal_history': 'Antecedentes personales de prueba',
            'family_history': 'Antecedentes familiares de prueba',
            'allergies': '',
            'current_medications': '',
            'smoking_habits': '',
            'alcohol_habits': '',
            'physical_activity': '',
            'observations': 'Observaciones generales',
            'symptoms': '',  # Vac√≠o para historia cl√≠nica
            'diagnosis': '',  # Vac√≠o para historia cl√≠nica
            'treatment': '',
            'prescriptions': ''
        }
        
        print("üìã Datos de prueba para historia cl√≠nica:")
        for key, value in form_data.items():
            if value:
                print(f"   {key}: {value[:50]}{'...' if len(value) > 50 else ''}")
            else:
                print(f"   {key}: (vac√≠o)")
        
        print()
        print("‚úÖ VALIDACI√ìN:")
        print("   - symptoms: vac√≠o (correcto para historia cl√≠nica)")
        print("   - diagnosis: vac√≠o (correcto para historia cl√≠nica)")
        print("   - personal_history: con datos (suficiente para historia cl√≠nica)")
        print("   - family_history: con datos (suficiente para historia cl√≠nica)")
        print()
        
        # Verificar que tiene informaci√≥n m√©dica suficiente
        has_medical_info = any([
            form_data.get('observations'),
            form_data.get('personal_history'),
            form_data.get('family_history'),
            form_data.get('allergies'),
            form_data.get('current_medications'),
            form_data.get('smoking_habits'),
            form_data.get('alcohol_habits'),
            form_data.get('physical_activity')
        ])
        
        if has_medical_info:
            print("‚úÖ RESULTADO: La validaci√≥n DEBER√çA PASAR")
            print("   Raz√≥n: Tiene informaci√≥n m√©dica suficiente para historia cl√≠nica")
        else:
            print("‚ùå RESULTADO: La validaci√≥n DEBER√çA FALLAR")
            print("   Raz√≥n: No tiene informaci√≥n m√©dica suficiente")
        
        print()
        print("üîß CORRECCI√ìN APLICADA:")
        print("   - Eliminada validaci√≥n obligatoria de 'symptoms' y 'diagnosis'")
        print("   - Agregada validaci√≥n de informaci√≥n m√©dica general")
        print("   - Historia cl√≠nica ya no requiere datos de consulta espec√≠fica")

if __name__ == "__main__":
    test_medical_history_validation()
